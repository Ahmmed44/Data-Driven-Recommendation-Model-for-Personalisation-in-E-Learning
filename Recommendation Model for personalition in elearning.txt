{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "studentVle=pd.read_csv('studentVle.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10655280, 6)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "studentVle.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x23fd23b6198>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "studentVle.groupby('code_module')['id_student'].nunique().plot(kind='bar')\n",
    "plt.title(' Students enrolled in course')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "studentVle.drop_duplicates(['id_student'],inplace=True)\n",
    "studentVle.drop('code_presentation',axis=1,inplace=True)\n",
    "studentVle.dropna(axis=0,inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26074, 5)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "studentVle.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split  \n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['code_module', 'id_student', 'id_site', 'date', 'sum_click'], dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "studentVle.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "Independent=studentVle.drop(['code_module'],axis=1)\n",
    "Dependent=studentVle['code_module']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "   Independent_train , Independent_test , Dependent_train ,Dependent_test = train_test_split(Independent,Dependent,test_size=0.3  , random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(18251, 4)\n",
      "(7823, 4)\n"
     ]
    }
   ],
   "source": [
    "print(Independent_train.shape)\n",
    "\n",
    "print(Independent_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(18251,)\n",
      "(7823,)\n"
     ]
    }
   ],
   "source": [
    "print(Dependent_train.shape)\n",
    "\n",
    "print(Dependent_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_values=[i for i in range (1,50,2)]\n",
    "k_acc_scores=[]\n",
    "\n",
    "for k in k_values:\n",
    "    knn=KNeighborsClassifier(n_neighbors=k, n_jobs= -1)\n",
    "    cv_scores=cross_val_score(knn,Independent_train,Dependent_train,cv=10,scoring='accuracy')\n",
    "    k_acc_scores.append(cv_scores.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "Best_k=k_values[k_acc_scores.index(max(k_acc_scores))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best_k: 1\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Best_k:\",(Best_k))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(k_values,k_acc_scores)\n",
    "plt.xlabel('value of k for KNN')\n",
    "plt.ylabel('Cross-validation Accuracy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn=KNeighborsClassifier(n_neighbors=1, n_jobs= -1) \n",
    "knn.fit(Independent_train , Dependent_train)\n",
    "predict=knn.predict(Independent_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9601176019429887\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy:\",(accuracy_score(predict ,Dependent_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.91041348, 0.92381317, 0.95937141, 0.95667178, 0.96431312,\n",
       "       0.94589409, 0.94359171, 0.96353167, 0.96775432, 0.978119  ])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(knn,Independent,Dependent,cv=10,scoring='accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9513473748017891"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "cross_val_score(knn,Independent,Dependent,cv=10,scoring='accuracy').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "new=[[664288,929332,50,2],\n",
    "      [930775,914228,30,4],\n",
    "       [750830,897934,90,3],\n",
    "     \n",
    "        [456975,765490,70,4],\n",
    "        [249854,395280,40,11],\n",
    "         [553958,895343,55,22],\n",
    "          [334343,8976796,33,10],\n",
    "           [796590,3453563,0,0],\n",
    "            [569045,456464,3,0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict=knn.predict(new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BBB\n",
      "CCC\n",
      "GGG\n",
      "BBB\n",
      "FFF\n",
      "GGG\n",
      "BBB\n",
      "BBB\n",
      "FFF\n"
     ]
    }
   ],
   "source": [
    "print (y_predict[0])\n",
    "print(y_predict[1])\n",
    "print(y_predict[2])\n",
    "\n",
    "print (y_predict[3])\n",
    "print(y_predict[4])\n",
    "print(y_predict[5])\n",
    "\n",
    "print(y_predict[6])\n",
    "print(y_predict[7])\n",
    "print(y_predict[8])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
